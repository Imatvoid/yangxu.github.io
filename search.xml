<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>解析Ubuntu 16.04 安装nvidia驱动 各种错误</title>
      <link href="/2019/02/17/%E8%A7%A3%E6%9E%90Ubuntu-16-04-%E5%AE%89%E8%A3%85nvidia%E9%A9%B1%E5%8A%A8-%E5%90%84%E7%A7%8D%E9%94%99%E8%AF%AF/"/>
      <url>/2019/02/17/%E8%A7%A3%E6%9E%90Ubuntu-16-04-%E5%AE%89%E8%A3%85nvidia%E9%A9%B1%E5%8A%A8-%E5%90%84%E7%A7%8D%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p><img src="https://www.geforce.com/sites/default/files-world/attachments/GTX-980_970-1280x720-Wallpaper-1.jpg" alt=""></p><a id="more"></a><h2 id="0-环境"><a href="#0-环境" class="headerlink" title="0.环境"></a>0.环境</h2><p>​         操作系统：ubuntu 16.04LTS<br>​         显卡：nvidia Geforce 970</p><h2 id="1-安装方式说明"><a href="#1-安装方式说明" class="headerlink" title="1.安装方式说明"></a>1.安装方式说明</h2><h4 id="1-1ppa源安装"><a href="#1-1ppa源安装" class="headerlink" title="1.1ppa源安装"></a>1.1ppa源安装</h4><p> 不建议通过这种方式安装，因为你无法配置具体选项且成功后需要经常手动更新驱动。当然鉴于其他方式安装对新手较为繁琐且 问题很多，如果你仅仅是需要临时搭建或者运气非常好，那么可以尝试。确实非常简单。</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:xorg-edgers/ppa #添加ppa源</span><br><span class="line">sudo add-apt-repository ppa:graphics-drivers/ppa #添加ppa源</span><br><span class="line">sudo apt-get update #更新apt-get</span><br></pre></td></tr></table></figure><p>然后进入：系统设置-&gt;软件和更新-&gt;附件驱动，选择更新的显卡驱动。<br><img src="https://img-blog.csdn.net/20180417115337235?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQ1NjE5MzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p><h4 id="1-2手动run文件安装"><a href="#1-2手动run文件安装" class="headerlink" title="1.2手动run文件安装"></a>1.2手动run文件安装</h4><p>推荐这种方式，我们可以根据具体机器配置具体选项。避免出现黑屏，循环登录等问题。</p><h2 id="2-run文件安装详解"><a href="#2-run文件安装详解" class="headerlink" title="2.run文件安装详解"></a>2.run文件安装详解</h2><h4 id="2-1手动下载驱动"><a href="#2-1手动下载驱动" class="headerlink" title="2.1手动下载驱动"></a>2.1手动下载驱动</h4><p><a href="https://www.geforce.cn/drivers" target="_blank" rel="noopener">官方显卡驱动</a>NVIDIA-Linux-x86_64-390.48.run<br>选择合适的参数后可以下载<br><img src="https://img-blog.csdn.net/20180417115752246?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQ1NjE5MzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p><h4 id="2-2卸载旧驱动"><a href="#2-2卸载旧驱动" class="headerlink" title="2.2卸载旧驱动"></a>2.2卸载旧驱动</h4><p>卸载可能存在的旧版本 nvidia 驱动（对没有安装过 nvidia 驱动的主机，这步可以省略，但推荐执行，无害），如果你安装失败了也需要执行这一步。</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove --purge nvidia*</span><br><span class="line"><span class="comment">#若安装失败也是这样卸载以及</span></span><br><span class="line">./NVIDIA-Linux-x86_64-390.48.run --uninstall <span class="comment">#确保卸载干净。</span></span><br></pre></td></tr></table></figure><h4 id="2-3安装可能需要的依赖（可选，脸红可以跳过）"><a href="#2-3安装可能需要的依赖（可选，脸红可以跳过）" class="headerlink" title="2.3安装可能需要的依赖（可选，脸红可以跳过）"></a>2.3安装可能需要的依赖（可选，脸红可以跳过）</h4><p>这里是为了确保万无一失</p><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#其实很多你的环境已经安装了，所以一般并没有多少时间。</span></span><br><span class="line"> sudo apt-get update </span><br><span class="line"> sudo apt-get install dkms build-essential linux-headers-generic</span><br><span class="line"> sudo apt-get install gcc-multilib xorg-dev</span><br><span class="line"> sudo apt-get install freeglut3-dev libx11-dev libxmu-dev install libxi-dev  libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev</span><br></pre></td></tr></table></figure><h4 id="2-4禁用noueau驱动"><a href="#2-4禁用noueau驱动" class="headerlink" title="2.4禁用noueau驱动"></a>2.4禁用noueau驱动</h4><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/modprobe.d/blacklist-nouveau.conf </span><br><span class="line"><span class="comment">#在文件 blacklist-nouveau.conf 中加入如下内容：</span></span><br><span class="line"> blacklist nouveau</span><br><span class="line"> blacklist lbm-nouveau</span><br><span class="line"> options nouveau modeset=0</span><br><span class="line"> <span class="built_in">alias</span> nouveau off</span><br><span class="line"> <span class="built_in">alias</span> lbm-nouveau off</span><br><span class="line"> <span class="comment">#保存   :wq</span></span><br></pre></td></tr></table></figure><figure class="hljs highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#禁用nouveau 内核模块</span></span><br><span class="line"><span class="built_in">echo</span> options nouveau modeset=0 | sudo tee -a /etc/modprobe.d/nouveau-kms.conf</span><br><span class="line">sudo update-initramfs -u</span><br><span class="line">reboot <span class="comment">#重启</span></span><br><span class="line">lsmod |grep nouveau <span class="comment">#无显示则成功 当然驱动没了你的桌面分辨率会比较大。</span></span><br></pre></td></tr></table></figure><h4 id="2-5进入blos关闭secure-boot-（华硕还有fast-boot）"><a href="#2-5进入blos关闭secure-boot-（华硕还有fast-boot）" class="headerlink" title="2.5进入blos关闭secure boot （华硕还有fast boot）"></a>2.5进入blos关闭secure boot （华硕还有fast boot）</h4><p>否则无法安装成功。</p><h4 id="2-6进入tty关闭图形界面"><a href="#2-6进入tty关闭图形界面" class="headerlink" title="2.6进入tty关闭图形界面"></a>2.6进入tty关闭图形界面</h4><p>按 CTRL + ALT + F1 键登录，从 GUI 转至终端tty1（全黑色）。为了重建视频输出，必须先将其暂停。</p><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service lightdm stop</span><br></pre></td></tr></table></figure><p>如果命令行没有效果，Ubuntu 新版本使用 systemctl 替换 lightdm。</p><h4 id="2-7-运行-run文件选择合适选项。"><a href="#2-7-运行-run文件选择合适选项。" class="headerlink" title="2.7  运行.run文件选择合适选项。"></a>2.7  运行.run文件选择合适选项。</h4><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd 下载目录</span><br><span class="line">chmod a+x NVIDIA-Linux-x86_64-384.90.run #添加权限</span><br><span class="line">sudo ./NVIDIA-Linux-x86_64-384.90.run --dkms --no-opengl-files</span><br></pre></td></tr></table></figure><ul><li><p>–no-opengl-files：表示只安装驱动文件，不安装OpenGL文件。这个参数不可省略，否则会导致登陆界面死循环，英语一般称为”login loop”或者”stuck in login”。</p><p>当然脸红的情况下并不会。<br>必选参数解释：因为NVIDIA的驱动默认会安装OpenGL，而Ubuntu的内核本身也有OpenGL、且与GUI显示息息相关，一旦NVIDIA的驱动覆写了OpenGL，在GUI需要动态链接OpenGL库的时候就引起问题。</p></li><li>–no-x-check：表示安装驱动时不检查X服务，非必需，我们已经禁用图形界面。</li><li>–no-nouveau-check：表示安装驱动时不检查nouveau，非必需，我们已经禁用驱动。</li><li>-Z, –disable-nouveau：禁用nouveau。此参数非必需，因为之前已经手动禁用了nouveau。</li><li>-A：查看更多高级选项。</li><li>-dkms（默认开启）在 kernel 自行更新时将驱动程序安装至模块中，从而阻止驱动程序重新安装。在 kernel 更新期间，dkms 触发驱动程序重编译至新的 kernel 模块堆栈。</li></ul><h4 id="2-8-关于pre-script-failed"><a href="#2-8-关于pre-script-failed" class="headerlink" title="2.8  关于pre-script failed"></a>2.8  关于pre-script failed</h4><p>运行时，你可能会收到一条 pre-install script failed 信息。这没什么影响,选择继续安装就行，因为预安装脚本包含命令 exit 1，其目标是确保你真的想安装驱动程序。<br>具体解释见我的博客。<a href="https://blog.csdn.net/u014561933/article/details/79958130" target="_blank" rel="noopener">https://blog.csdn.net/u014561933/article/details/79958130</a><br>当然你前面的工作没做对，会提示其他报错信息。日志在/var/log/nvidia-install.log</p><h4 id="2-9-安装过程中的选项"><a href="#2-9-安装过程中的选项" class="headerlink" title="2.9  安装过程中的选项"></a>2.9  安装过程中的选项</h4><ul><li>dkms 安装最好 选yes</li><li>32位兼容 安装最好 选yes</li><li>x-org 最好别安，选no，有的电脑可能导致登录界面黑屏</li></ul><h4 id="2-10安装完成后验证"><a href="#2-10安装完成后验证" class="headerlink" title="2.10安装完成后验证"></a>2.10安装完成后验证</h4><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi #若列出GPU的信息列表，表示驱动安装成功</span><br></pre></td></tr></table></figure><p>若失败则跳回第一步卸载后重新开始。</p><h4 id="2-11-重新进入桌面"><a href="#2-11-重新进入桌面" class="headerlink" title="2.11 重新进入桌面"></a>2.11 重新进入桌面</h4><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service lightdm start #没自动跳的话 crtl+alt+f7</span><br><span class="line">nvidia-settings #若弹出设置对话框，亦表示驱动安装成功</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> nvidia </tag>
            
            <tag> ubuntu </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sleep()和wait()方法与对象锁、锁池、等待池</title>
      <link href="/2017/01/17/sleep-%E5%92%8Cwait-%E6%96%B9%E6%B3%95%E4%B8%8E%E5%AF%B9%E8%B1%A1%E9%94%81%E3%80%81%E9%94%81%E6%B1%A0%E3%80%81%E7%AD%89%E5%BE%85%E6%B1%A0/"/>
      <url>/2017/01/17/sleep-%E5%92%8Cwait-%E6%96%B9%E6%B3%95%E4%B8%8E%E5%AF%B9%E8%B1%A1%E9%94%81%E3%80%81%E9%94%81%E6%B1%A0%E3%80%81%E7%AD%89%E5%BE%85%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<p>一道Java的题目:</p><blockquote><p>关于sleep()和wait()，以下描述错误的一项是:</p><ul><li>A sleep是线程类（Thread）的方法，wait是Object类的方法；</li><li>B sleep不释放对象锁，wait放弃对象锁</li><li>C sleep暂停线程、但监控状态仍然保持，结束后会自动恢复</li><li>D wait后进入等待锁定池，只有针对此对象发出notify方法后获得对象锁进入运行状态</li></ul></blockquote><a id="more"></a><p><strong>1.关于对象锁</strong>：</p><p><strong>截取网上的一段话</strong>：</p><blockquote><p>  所有对象都自动含有单一的锁。<br>     JVM负责跟踪对象被加锁的次数。如果一个对象被解锁，其计数变为0。在任务（线程）第一次给对象加锁的时候，计数变为1。每当这个相同的任务（线程）在此对象上获得锁时，计数会递增。<br>     只有首先获得锁的任务（线程）才能继续获取该对象上的多个锁。<br>     每当任务离开一个synchronized（同步）方法，计数递减，当计数为0的时候，锁被完全释放，此时别的任务就可以使用此资源。</p></blockquote><p>   这段话令人感到迷惑，一个对象不是只有一个锁吗？只有获得这个对象的锁才能对它进行操作，若这个对象的锁被一个线程先获得，那就其他线程就需要等待。那多次加锁什么意思，锁不是依附于对象的吗？<br>​    在往下的文章中，我暂且理解为一个对象有且只有一把锁，锁在不同线程间传递，一个线程可以多次获得同一个对象的锁。暂且不考虑一个对象上多个锁这种方法是不是确实存在，这对下面影响不大。</p><p><strong>2.关于锁池和等待池</strong></p><p> 在Java中，每个对象都有两个池，锁(monitor)池和等待池</p><ul><li><p>锁池:假设线程A已经拥有了某个对象(注意:不是类)的锁，而其它的线程想要调用这个对象的某个synchronized方法(或者synchronized块)，由于这些线程在进入对象的synchronized方法之前必须先获得该对象的锁的拥有权，但是该对象的锁目前正被线程A拥有，所以这些线程就进入了该对象的锁池中。<br>​    </p></li><li><p>等待池:假设一个线程A调用了某个对象的wait()方法，线程A就会释放该对象的锁(因为wait()方法必须出现在synchronized中，这样自然在执行wait()方法之前线程A就已经拥有了该对象的锁)，同时线程A就进入到了该对象的等待池中。如果另外的一个线程调用了相同对象的notifyAll()方法，那么处于该对象的等待池中的线程就会全部进入该对象的锁池中，准备争夺锁的拥有权。如果另外的一个线程调用了相同对象的notify()方法，那么仅仅有一个处于该对象的等待池中的线程(随机)会进入该对象的锁池.</p></li></ul><p><strong>深入理解</strong>：<br>​        如果线程调用了对象的 wait()方法，那么线程便会处于该对象的等待池中，等待池中的线程不会去竞争该对象的锁。<br>​        当有线程调用了对象的 notifyAll()方法（唤醒所有 wait 线程）或 notify()方法（只随机唤醒一个 wait 线程），被唤醒的的线程便会进入该对象的锁池中，锁池中的线程会去竞争该对象锁。<br>优先级高的线程竞争到对象锁的概率大，假若某线程没有竞争到该对象锁，它还会留在锁池中，唯有线程再次调用 wait()方法，它才会重新回到等待池中。而竞争到对象锁的线程则继续往下执行，直到执行完了 synchronized 代码块，它会释放掉该对象锁，这时锁池中的线程会继续竞争该对象锁。</p><p>注：wait() ,notifyAll(),notify() 三个方法都是Object类中的方法. </p><p><strong>3.关于wait() ,notifyAll(),notify() 三个方法</strong></p><ul><li>wait()<br>public final void wait() throws InterruptedException,IllegalMonitorStateException</li></ul><p>该方法用来将当前线程置入休眠状态，直到接到通知或被中断为止。在调用 wait()之前，线程必须要获得该对象的对象级别锁，即只能在同步方法或同步块中调用 wait()方法。进入 wait()方法后，当前线程释放锁。在从 wait()返回前，线程与其他线程竞争重新获得锁。如果调用 wait()时，没有持有适当的锁，则抛出 IllegalMonitorStateException，它是 RuntimeException 的一个子类，因此，不需要 try-catch 结构。</p><ul><li>notify()<br>public final native void notify() throws IllegalMonitorStateException</li></ul><p>该方法也要在同步方法或同步块中调用，即在调用前，线程也必须要获得该对象的对象级别锁，的如果调用 notify()时没有持有适当的锁，也会抛出 IllegalMonitorStateException。</p><p>该方法用来通知那些可能等待该对象的对象锁的其他线程。如果有多个线程等待，则线程规划器任意挑选出其中一个 wait()状态的线程来发出通知，并使它等待获取该对象的对象锁（<strong>notify 后，当前线程不会马上释放该对象锁，wait 所在的线程并不能马上获取该对象锁，要等到程序退出 synchronized 代码块后，当前线程才会释放锁，wait所在的线程也才可以获取该对象锁</strong>），但不惊动其他同样在等待被该对象notify的线程们。<strong>当第一个获得了该对象锁的 wait 线程运行完毕以后，它会释放掉该对象锁，此时如果该对象没有再次使用 notify 语句，则即便该对象已经空闲，其他 wait 状态等待的线程由于没有得到该对象的通知，会继续阻塞在 wait 状态</strong>，直到这个对象发出一个 notify 或 notifyAll。<strong>这里需要注意：它们等待的是被 notify 或 notifyAll，而不是锁。这与下面的 notifyAll()方法执行后的情况不同。</strong></p><ul><li>notifyAll()<br>public final native void notifyAll() throws IllegalMonitorStateException</li></ul><p>该方法与 notify ()方法的工作方式相同，重要的一点差异是：</p><p>notifyAll 使所有原来在该对象上 wait 的线程统统退出 wait 的状态（即全部被唤醒，不再等待 notify 或 notifyAll，但由于此时还没有获取到该对象锁，因此还不能继续往下执行），变成等待获取该对象上的锁，一旦该对象锁被释放（notifyAll 线程退出调用了 notifyAll 的 synchronized 代码块的时候），他们就会去竞争。如果其中一个线程获得了该对象锁，它就会继续往下执行，在它退出 synchronized 代码块，释放锁后，其他的已经被唤醒的线程将会继续竞争获取该锁，一直进行下去，直到所有被唤醒的线程都执行完毕。</p><p><strong>4.sleep()不会释放掉锁（监控）</strong><br>​     最开始的那道题答案是D</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发 </tag>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>目录</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>About  atVoid</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p>等我不加班时候补上。</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
